@import "../../styles/tokens.css";
@import "../../styles/animations.css";

.tab {
  --OnNeutral: oklch(25.151% 0.03726 270.183);
  --SurfaceHover: oklch(97.428% 0.00541 286);
  --SurfaceHigh: oklch(95.986% 0.00809 286.053);
  --SurfaceActive: oklch(95.986% 0.00809 286.053);

  --OnInverse: oklch(100% 0.00011 271.152);
  --Inverse: oklch(25.151% 0.03726 270.183);

  --InverseHover: oklch(35.154% 0.03594 271.521);
  --InverseActive: oklch(48.151% 0.03283 274.095);

  --Outline: oklch(86.952% 0.01239 286.029);
  --OutlineHover: oklch(82.566% 0.01401 281.452);

  composes: bodyM from "../../styles/typography.css";
  composes: colors from "../../styles/animations.css";

  font-weight: 700;
  border: unset;
  background: unset;
  padding: unset;

  display: flex;
  flex-direction: column;
  white-space: nowrap;
  cursor: pointer;

  block-size: 2.625rem;
  @media (width > 48rem) {
    block-size: 3.125rem;
  }

  &:focus {
    outline: 2px solid oklch(0% 0 0);
    outline-offset: 2px;
  }

  /* PILL variant */
  &.pill {
    border-radius: 100px;
    border: 1px solid;
    padding: var(--spacing-0) var(--spacing-xs);
    @media (width > 48rem) {
      padding-inline: var(--spacing-s);
    }

    /* selected state is true (inferred by aria-selected) */
    &[aria-selected="true"] {
      color: var(--OnInverse);
      border-color: var(--Inverse);
      background-color: var(--Inverse);

      &:hover {
        background-color: var(--InverseHover);
        border-color: var(--InverseHover);
      }

      &:focus {
        background-color: var(--Inverse);
        border-color: var(--Inverse);
      }

      &:active {
        background-color: var(--InverseActive);
        border-color: var(--InverseActive);
      }
    }

    /* selected state is false (inferred by aria-selected) */
    &[aria-selected="false"] {
      /* defining a starting color with alpha 0 for the transition (not defined on Figma) */
      --Surface: oklch(from var(--InverseActive) l c h / 0);

      color: var(--OnNeutral);
      border-color: var(--Outline);
      background-color: var(--Surface);

      &:hover {
        background-color: var(--SurfaceHover);
      }

      &:focus {
        background-color: var(--Surface);
      }

      &:active {
        background-color: var(--SurfaceActive);
      }
    }
  }

  /* UNDERLINE variant */
  &.underline {
    border-radius: var(--radius-2xs);

    /* defining a starting color with alpha 0 for the transition (not defined on Figma) */
    --underline-color: oklch(from var(--OutlineHover) l c h / 0);

    &[aria-selected="true"] {
      --underline-color: var(--Inverse);
    }
    &[aria-selected="false"]:is(:active, :hover, :focus) {
      --underline-color: var(--OutlineHover);
    }

    /* The underline is created with a pseudoelement instead of a border-bottom
    * because a border-radius is defined.
    * Another way could be defining an inline SVG as a data:image bakground with
    * vector-effect="non-scaling-stroke" to have a consistent tickness, regardless
    * of the tab width (see https://codepen.io/fcalderan/full/yLadPg) but I'd need
    * to hardcode the color in the SVG itself, so in this will eventually end in 
    * code duplication.
    */
    &:after {
      content: ""/"";
      block-size: 3px;
      border-radius: 100px;
      transition: inherit;
      background: var(--underline-color);
    }
  }
}

.tab__label {
  display: flex;
  flex-wrap: nowrap;
  flex: 1;
  align-items: center;
  gap: var(--spacing-2xs);
}
